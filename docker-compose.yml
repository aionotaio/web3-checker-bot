services:
  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: always
    env_file:
      - .env
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongodb:27017/admin --quiet
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    env_file:
      - .env
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
  bot:
    build:
      context: .
      dockerfile: bot/Dockerfile
    container_name: telegram-bot
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    working_dir: /app/bot
  admin:
    build:
      context: .
      dockerfile: admin/Dockerfile
    container_name: admin-panel
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      - bot
    ports:
      - "8000:80"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    working_dir: /app/admin

volumes:
  mongo-data:
  rabbitmq-data: